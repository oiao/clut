#!/usr/bin/env python

import os
from os.path import join as opj
import numpy as np
from glob import glob
import argparse
from clut import *
from PIL import Image, ImageFilter

parser = argparse.ArgumentParser(description='CLUT Command Line Interface')
parser.add_argument('-s', '--silent', action='store_true', help='Disable verbose output')
subpar = parser.add_subparsers(dest='command')

par_apply = subpar.add_parser('apply', help='Apply a HaldCLUT image filter to a number of files or directories')
par_apply.add_argument('haldclut', help='Path to the HaldCLUT image filter')
par_apply.add_argument('--to', required=True, nargs='+', help='The target(s) that the HaldCLUT is applied to. Can be (multiple) files or directories.')
par_apply.add_argument('--scale', help='Scale all output images. Default: 1', type=float, default=1)
par_apply.add_argument('--suffix',help='The suffix to be appended to the output file names', default='_clut')

par_bat = subpar.add_parser('batch-apply', help='Batch-Apply multiple HaldCLUT image filters to one target image')
par_bat.add_argument('--clutdir', help='Directory with HaldCLUT image files', required=True)
par_bat.add_argument('--to', required=True, nargs=1, help='Single target image each HaldCLUT will be applied to')
par_bat.add_argument('--scale', help='Scale all output images. Default: 0.2', type=float, default=.2)
par_bat.add_argument('-o', '--out',help='Output directory. Default: `cluts`', default='cluts')

par_fit = subpar.add_parser('fit', help='Re-create a HaldCLUT filter from a series of input/output images.')
par_fit.add_argument('--from', required=True, nargs='+', help='Sequence of unedited image paths or directory', dest='fro')
par_fit.add_argument('--to',   required=True, nargs='+', help='Sequence of edited image paths in the same order as `--FROM` or directory. In case of a directory, file names must be the same.')
par_fit.add_argument('-o', '--out', help='Output path of the generated HaldCLUT', default='clutfit.png')
par_fit.add_argument('--size',  help='Size of the generated HaldCLUT (2-64).', type=int, default=64)
par_fit.add_argument('--scale', help='Scale all input/output images before processing. Helps to reduce artifacts. Default: 1', type=float, default=1.)
par_fit.add_argument('--denoise', help='De-noise the resulting CLUT. If your images have visible artifacts after applying the CLUT, set this parameter to > 0. Typical values are 1e-4 (very good results, slow) to 0.1 (better-than-nothing results, fast). Default value is 0 (off).', type=float, default=0)
par_fit.add_argument('--lossless', help='Saves the CLUT instance in a lossless binary format. Use this to speed up the `clut apply` command.', action='store_true')
# par_fit.add_argument('--noshuffle', help='Disable input/output RGB shuffling before creating the CLUT. Disabing will likely result in more artifacts.', action='store_true')
par_fit.add_argument('--printstats', help='Print the number of unique RGB colors found in all input/output images. Enabling this slows down the fitting process', action='store_true')

args = parser.parse_args()

def vprint(*a, **kw):
    if not args.silent:
        print(*a, **kw)

def path2im(path, scale=1):
    try:    im = Image.open(path)
    except:
        vprint(f"ERROR: Could not open image in '{path}'.")
        return None
    if scale < 1:
        size = [int(scale*i) for i in im.size]
        im = im.resize(size)
    return im

def getfilter(haldpath):
    if not os.path.isfile(haldpath):
        vprint(f"\n\nERROR: The file '{haldpath}' does not exist, exiting!")
        exit(1)
    try:
        clut = CLUT(haldpath, _nointerpol=True)
    except:
        vprint(f"\n\nERROR: Could not open the HaldCLUT image in {haldpath}. Traceback follows:\n\n")
        raise
    size = clut.shape[0]
    if size > 64:
        return
    clut = np.swapaxes(clut.clut,0,2)
    clut = clut.reshape(3 * size**3)/255.
    return ImageFilter.Color3DLUT(size, clut)




if args.command is None:
    parser.print_help()


elif args.command == 'apply':
    clut = getfilter(args.haldclut)
    if clut is None:
        clut = CLUT(args.haldclut)

    def do_path(path):
        im = path2im(path, args.scale)
        if im is not None:
            vprint(f"{path} ...")
            imout = Image.fromarray(clut(im)) if isinstance(clut, CLUT) else im.filter(clut)
            name  = os.path.splitext(path)
            name  = f"{name[0]}{args.suffix}{name[1]}"
            imout.save(name)

    for path in args.to:
        if os.path.isdir(path):
            for ppath in glob(path+'*'):
                do_path(ppath)
        else:
            do_path(path)


elif args.command == 'batch-apply':
    if not os.path.isdir(args.clutdir):
        print(f"\n\nERROR: The CLUT directory '{args.clutdir}' does not exists or is not a directory.")
        exit(1)
    if not os.path.exists(args.out):
        os.makedirs(args.out)
    elif not os.path.isdir(args.out):
        print(f"\n\nERROR: A file with the output directory's name '{args.clutdir}' already exists.")
        exit(1)
    if not os.path.exists(args.to):
        print(f"\n\nERROR: The target image '{args.to}' does not exist.")

    im = path2im(args.to, args.scale)
    for clutpath in glob(opj(args.clutdir,'*')):
        clut = getfilter(clutpath)
        if clut is None:
            vprint('\n\nERROR: Pillow does not support HaldCLUTs that are saved with a size > 8. Please provide a smaller-sized HaldCLUT (use the `size` argument when calling `CLUT.save`).')
            exit(1)
        imout = im.filter(clut)
        imout.save(opj(args.out, os.path.basename(clutpath)))


elif args.command == 'fit':
    names = []
    for inims, outims in zip(args.fro, args.to):
        if not os.path.exists(inims):
            vprint(f"ERROR: --from {inims} does not exist.")
            exit(1)
        if not os.path.exists(outims):
            vprint(f"ERROR: --to {outims} does not exist.")
            exit(1)

        dirs = sum([ os.path.isdir(i) for i in (inims, outims) ])
        if dirs == 1:
            vprint(f"ERROR: The --from/--to pair '{inims}' / '{outims}' is not of the same type. Make sure the positions are the same in both arguments and both are directories or image files.")
            exit(1)
        elif dirs == 2:
            _names = set(os.listdir(inims)) .intersection( set(os.listdir(outims)) )
            for name in _names:
                names.append((opj(inims,name), opj(outims,name)))
        elif dirs == 0:
            names.append((inims,outims))

    if not names:
        vprint(f"ERROR: Could not generate input/output image pairs. This happens when there are no files with the same names in the specified directories")
        exit(1)
    else:
        vprint(f"Fitting based on {len(names)} image pairs ...")

    clut  = clutfit(*names, scale=args.scale, denoise=args.denoise, printstats=args.printstats)
    if args.lossless:
        clut.npsave(args.out)
    else:
        clut.save(args.out, size=args.size)
